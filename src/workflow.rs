use std::{path::PathBuf, sync::Arc};
use tokio::{task, sync::Notify, time::interval};
use tracing::{error, info, warn};

use crate::{
    MODELS,
    ai_text_analyzer::AiTextAnalyzer,
    api::pdf::{WebhookRequest, convert_to_image},
    config::AiConfig,
    diff::{DiffResult, ModelJson, fmt_diff_result_to_md},
};

/// PDF ÂàÜÊûêÂ∑•‰ΩúÊµÅ
pub struct PdfAnalysisWorkflow {
    pdf_path: PathBuf,
    webhook_url: String,
    api_key: String,
    analysis_complete_notifier: Arc<Notify>,
}

impl PdfAnalysisWorkflow {
    pub fn new(pdf_path: PathBuf, webhook_url: String, api_key: String) -> Self {
        Self {
            pdf_path,
            webhook_url,
            api_key,
            analysis_complete_notifier: Arc::new(Notify::new()),
        }
    }

    /// ÂêØÂä®ÂêéÂè∞ÂàÜÊûê‰ªªÂä°
    pub fn start_background_analysis(self) {
        // ÂÖàÂèëÈÄÅÂàùÂßãÈÄöÁü•
        let webhook_url = self.webhook_url.clone();
        let api_key = self.api_key.clone();
        let notifier = self.analysis_complete_notifier.clone();
        
        // ÂêØÂä®ÂàÜÊûê‰ªªÂä°
        let analysis_task = {
            let self_clone = PdfAnalysisWorkflow {
                pdf_path: self.pdf_path.clone(),
                webhook_url: self.webhook_url.clone(),
                api_key: self.api_key.clone(),
                analysis_complete_notifier: self.analysis_complete_notifier.clone(),
            };
            task::spawn(async move {
                self_clone.run_analysis().await;
            })
        };
        
        // ÂêØÂä®ÂÆöÊó∂ÈÄöÁü•‰ªªÂä°
        let notification_task = task::spawn(async move {
            // ÂèëÈÄÅÂàùÂßãÈÄöÁü•
            Self::send_notification(&webhook_url, &api_key, 
                "üìÑ PDFÂàÜÊûêÂ∑≤ÂºÄÂßãÔºåÈ¢ÑËÆ°ÈúÄË¶Å30ÁßíÊàñÊõ¥Â§öÊó∂Èó¥ÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ...").await;
            
            let mut counter = 1;
            let mut interval = interval(std::time::Duration::from_secs(15));
            
            loop {
                tokio::select! {
                    _ = interval.tick() => {
                        let message = format!("‚è≥ ÂàÜÊûêËøõË°å‰∏≠... ({} ÂàÜÈíü) ËØ∑ÁªßÁª≠Á≠âÂæÖ", counter * 15 / 60 + 1);
                        Self::send_notification(&webhook_url, &api_key, &message).await;
                        counter += 1;
                    }
                    _ = notifier.notified() => {
                        info!("üì¢ ÂàÜÊûêÂÆåÊàêÔºåÂÅúÊ≠¢ÂÆöÊó∂ÈÄöÁü•");
                        break;
                    }
                }
            }
        });
        
        // Á°Æ‰øù‰∏§‰∏™‰ªªÂä°ÈÉΩÂÆåÊàê
        task::spawn(async move {
            let _ = tokio::join!(analysis_task, notification_task);
        });
    }

    /// ÊâßË°åÂÆåÊï¥ÁöÑÂàÜÊûêÊµÅÁ®ã
    async fn run_analysis(self) {
        info!("ÂºÄÂßãÂêéÂè∞ÂàÜÊûê PDF: {}", self.pdf_path.display());

        let result = self.perform_analysis().await;

        match result {
            Ok(response_text) => {
                info!("‚úÖ ÂàÜÊûêÂÆåÊàêÔºåÂèëÈÄÅÁªìÊûú");
                self.send_response(&response_text).await;
            }
            Err(error_msg) => {
                error!("‚ùå ÂàÜÊûêÂ§±Ë¥•: {}", error_msg);
                self.send_response(&format!("‚ùå ÂàÜÊûêÂ§±Ë¥•: {}", error_msg))
                    .await;
            }
        }
        
        // ÈÄöÁü•ÂÆöÊó∂‰ªªÂä°ÂàÜÊûêÂ∑≤ÂÆåÊàê
        self.analysis_complete_notifier.notify_one();
    }

    /// ÊâßË°åÂàÜÊûêÈÄªËæë
    async fn perform_analysis(&self) -> Result<String, String> {
        // 1. ËΩ¨Êç¢ PDF ‰∏∫ÂõæÁâá
        info!("üìÑ Ê≠£Âú®ËΩ¨Êç¢ PDF ‰∏∫ÂõæÁâá...");
        let output_path =
            convert_to_image(&self.pdf_path).map_err(|e| format!("PDF ËΩ¨Êç¢Â§±Ë¥•: {}", e))?;

        // 2. ÂàùÂßãÂåñ AI ÂàÜÊûêÂô®
        info!("ü§ñ Ê≠£Âú®ÂàùÂßãÂåñ AI ÂàÜÊûêÂô®...");
        let analyzer = AiTextAnalyzer::new(AiConfig::default());
        analyzer
            .verify_api_availability()
            .map_err(|e| format!("AI ÂàÜÊûêÂô®ÂàùÂßãÂåñÂ§±Ë¥•: {}", e))?;

        // 3. ÊèêÂèñÊñáÊú¨‰ø°ÊÅØ
        info!("üîç Ê≠£Âú®ÊèêÂèñÊñáÊú¨‰ø°ÊÅØ...");
        let extraction_result = analyzer
            .extract_text_from_folder(&output_path)
            .await
            .map_err(|e| format!("ÊñáÊú¨ÊèêÂèñÂ§±Ë¥•: {}", e))?;

        // 4. Ê£ÄÊü•ÊèêÂèñÁªìÊûú
        if let Some(error) = &extraction_result.error {
            return Err(format!("ÊñáÊú¨ÊèêÂèñÈîôËØØ: {}", error));
        }

        // 5. ËΩ¨Êç¢‰∏∫ ModelJson Âπ∂ËøõË°åÁõ∏‰ººÂ∫¶ÊØîËæÉ
        info!("üìä Ê≠£Âú®ËøõË°åÁõ∏‰ººÂ∫¶ÊØîËæÉ...");
        let model_json = ModelJson::from(extraction_result);

        let sorted_models = MODELS.clone();
        let mut diff_results = ModelJson::diff(sorted_models, model_json);
        DiffResult::sort(&mut diff_results);
        let response_text = fmt_diff_result_to_md(&diff_results);

        info!("‚úÖ ÂàÜÊûêÂÆåÊàê");
        Ok(response_text)
    }

    /// ÂèëÈÄÅÂìçÂ∫îÂà∞ webhook
    async fn send_response(&self, content: &str) {
        let client = reqwest::Client::new();

        match client
            .post(&self.webhook_url)
            .header("content-type", "text/markdown")
            .header("x-api-key", &self.api_key)
            .body(content.to_string())
            .send()
            .await
        {
            Ok(response) => {
                if response.status().is_success() {
                    info!("‚úÖ ÁªìÊûúÂ∑≤ÊàêÂäüÂèëÈÄÅÂà∞ webhook");
                } else {
                    warn!("‚ö†Ô∏è Webhook ÂìçÂ∫îÁä∂ÊÄÅ: {}", response.status());
                }
            }
            Err(e) => {
                error!("‚ùå ÂèëÈÄÅ webhook Â§±Ë¥•: {}", e);
            }
        }
    }
    
    /// ÂèëÈÄÅÈÄöÁü•Ê∂àÊÅØÔºàÈùôÊÄÅÊñπÊ≥ïÔºâ
    async fn send_notification(webhook_url: &str, api_key: &str, message: &str) {
        let client = reqwest::Client::new();
        
        match client
            .post(webhook_url)
            .header("content-type", "text/plain")
            .header("x-api-key", api_key)
            .body(message.to_string())
            .send()
            .await
        {
            Ok(response) => {
                if response.status().is_success() {
                    info!("üì¢ ÈÄöÁü•Â∑≤ÂèëÈÄÅ: {}", message);
                } else {
                    warn!("‚ö†Ô∏è ÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•ÔºåÁä∂ÊÄÅ: {}", response.status());
                }
            }
            Err(e) => {
                error!("‚ùå ÂèëÈÄÅÈÄöÁü•Â§±Ë¥•: {}", e);
            }
        }
    }
}

/// ÂàõÂª∫Âπ∂ÂêØÂä® PDF ÂàÜÊûêÂ∑•‰ΩúÊµÅ
pub fn create_pdf_analysis_workflow(
    pdf_path: PathBuf,
    req: &WebhookRequest,
) -> PdfAnalysisWorkflow {
    let webhook_url = format!(
        "https://huateng.voce.chat/api/bot/send_to_user/{}",
        req.from_uid
    );
    let api_key = "013b93273ce0dc707e4d55a214f0b54a63bde7fe7dc803b4eda52b3bc828975a7b22756964223a322c226e6f6e6365223a223661432f436558557032674141414141646e4b666f2f76412b64774b4b455465227d".to_string();
    PdfAnalysisWorkflow::new(pdf_path, webhook_url, api_key)
}
